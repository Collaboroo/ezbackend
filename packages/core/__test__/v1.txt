{
      ready: [Function: bound ],
      getSchema: [Function: bound getSchema],
      getSchemas: [Function: bound getSchemas],
      [Symbol(fastify.children)]: [
        <ref *1> {
          ready: [Function: bound ],
          getSchema: [Function: bound getSchema],
          getSchemas: [Function: bound getSchemas],
          [Symbol(fastify.children)]: [],
          [Symbol(fastify.Reply)]: [Function: _Reply],
          [Symbol(fastify.Request)]: [Function: _Request],
          [Symbol(fastify.contentTypeParser)]: ContentTypeParser {
            customParsers: { 'application/json': [Parser], 'text/plain': [Parser] },
            parserList: [ 'application/json', 'text/plain' ],
            parserRegExpList: [],
            cache: LRU {
              first: null,
              items: [Object: null prototype] {},
              last: null,
              max: 100,
              size: 0,
              ttl: 0
            },
            [Symbol(fastify.defaultJSONParse)]: [Function: defaultJsonParser]
          },
          [Symbol(fastify.hooks)]: Hooks {
            onRequest: [],
            preParsing: [],
            preValidation: [],
            preSerialization: [],
            preHandler: [],
            onResponse: [],
            onSend: [],
            onError: [],
            onRoute: [],
            onRegister: [],
            onReady: [],
            onTimeout: []
          },
          [Symbol(fastify.routePrefix)]: '/v1/model',
          [Symbol(fastify.logLevel)]: '',
          [Symbol(fastify.schemaController)]: SchemaController {
            opts: {
              bucket: [Function: buildSchemas],
              compilersFactory: [Object]
            },
            addedSchemas: true,
            compilersFactory: {
              buildValidator: [Function: buildCompilerFromPool],
              buildSerializer: [Function: serializerFactory]
            },
            schemaBucket: Schemas { store: [Object] },
            validatorCompiler: undefined,
            serializerCompiler: undefined,
            parent: SchemaController {
              opts: [Object],
              addedSchemas: true,
              compilersFactory: [Object],
              schemaBucket: [Schemas],
              validatorCompiler: undefined,
              serializerCompiler: undefined,
              parent: [SchemaController]
            }
          },
          [Symbol(registered-plugin)]: Array {},
          [Symbol(fastify.pluginNameChain)]: [
            'function (instance, opts) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) { -- return [2 /*return*/];'
          ],
          [Symbol(fastify.404LogLevelInstance)]: [Circular *1],
          [Symbol(fastify.canSetNotFoundHandler)]: true
        }
      ],
      [Symbol(fastify.Reply)]: [Function: _Reply],
      [Symbol(fastify.Request)]: [Function: _Request],
      [Symbol(fastify.contentTypeParser)]: ContentTypeParser {
        customParsers: {
          'application/json': Parser {
            asString: true,
            asBuffer: false,
            bodyLimit: 1048576,
            fn: [Function: defaultJsonParser]
          },
          'text/plain': Parser {
            asString: true,
            asBuffer: false,
            bodyLimit: 1048576,
            fn: [Function: defaultPlainTextParser]
          }
        },
        parserList: [ 'application/json', 'text/plain' ],
        parserRegExpList: [],
        cache: LRU {
          first: null,
          items: [Object: null prototype] {},
          last: null,
          max: 100,
          size: 0,
          ttl: 0
        },
        [Symbol(fastify.defaultJSONParse)]: [Function: defaultJsonParser]
      },
      [Symbol(fastify.hooks)]: Hooks {
        onRequest: [],
        preParsing: [],
        preValidation: [],
        preSerialization: [],
        preHandler: [],
        onResponse: [],
        onSend: [],
        onError: [],
        onRoute: [],
        onRegister: [],
        onReady: [],
        onTimeout: []
      },
      [Symbol(fastify.routePrefix)]: '/v1',
      [Symbol(fastify.logLevel)]: '',
      [Symbol(fastify.schemaController)]: SchemaController {
        opts: {
          bucket: [Function: buildSchemas],
          compilersFactory: {
            buildValidator: [Function: buildCompilerFromPool],
            buildSerializer: [Function: serializerFactory]
          }
        },
        addedSchemas: true,
        compilersFactory: {
          buildValidator: [Function: buildCompilerFromPool],
          buildSerializer: [Function: serializerFactory]
        },
        schemaBucket: Schemas {
          store: {
            schemaId: { '$id': 'schemaId', type: 'object', properties: [Object] },
            v1Schema: { '$id': 'v1Schema', type: 'object', properties: [Object] }
          }
        },
        validatorCompiler: undefined,
        serializerCompiler: undefined,
        parent: SchemaController {
          opts: {
            bucket: [Function: buildSchemas],
            compilersFactory: {
              buildValidator: [Function: buildCompilerFromPool],
              buildSerializer: [Function: serializerFactory]
            }
          },
          addedSchemas: true,
          compilersFactory: {
            buildValidator: [Function: buildCompilerFromPool],
            buildSerializer: [Function: serializerFactory]
          },
          schemaBucket: Schemas { store: { schemaId: [Object] } }
        }
      },
      [Symbol(registered-plugin)]: Array {},
      [Symbol(fastify.pluginNameChain)]: [
        'function (instance, opts) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) { -- return [2 /*return*/];'
      ],
      [Symbol(fastify.404LogLevelInstance)]: [Circular *2],
      [Symbol(fastify.canSetNotFoundHandler)]: true
    }