"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[253],{876:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return m}});var o=t(2784);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=o.createContext({}),c=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return o.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(t),m=r,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||a;return t?o.createElement(f,i(i({ref:n},p),{},{components:t})):o.createElement(f,i({ref:n},p))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<a;c++)i[c]=t[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},4311:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return d}});var o=t(7896),r=t(1461),a=(t(2784),t(876)),i=["components"],s={sidebar_position:1},l="Lifecycle and Hooks",c={unversionedId:"tutorial-extras/lifecycle-and-hooks",id:"tutorial-extras/lifecycle-and-hooks",isDocsHomePage:!1,title:"Lifecycle and Hooks",description:"EzBackend allows you to create custom plugins by hooking your plugins into any part of the EzBackend lifecycle as you so wish",source:"@site/docs/tutorial-extras/lifecycle-and-hooks.md",sourceDirName:"tutorial-extras",slug:"/tutorial-extras/lifecycle-and-hooks",permalink:"/ezbackend/docs/tutorial-extras/lifecycle-and-hooks",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/tutorial-extras/lifecycle-and-hooks.md",version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Auto Generated APIs",permalink:"/ezbackend/docs/tutorial-basics/auto-generated-routes"},next:{title:"Supported DataTypes",permalink:"/ezbackend/docs/tutorial-extras/supported-datatypes"}},p=[{value:"An introduction to lifecycle and hooks",id:"an-introduction-to-lifecycle-and-hooks",children:[]}],u={toc:p};function d(e){var n=e.components,t=(0,r.Z)(e,i);return(0,a.kt)("wrapper",(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"lifecycle-and-hooks"},"Lifecycle and Hooks"),(0,a.kt)("p",null,"EzBackend allows you to create custom plugins by hooking your plugins into any part of the EzBackend lifecycle as you so wish"),(0,a.kt)("h2",{id:"an-introduction-to-lifecycle-and-hooks"},"An introduction to lifecycle and hooks"),(0,a.kt)("p",null,"EzBackend's lifecycle is as shown below, with code running from top to bottom."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"preInit\n|_preInit[0]\n|_preInit[1]\n|\ninit\n|\npostInit\n|_postInit[0]\n|_postInit[1]\n|\npreHandler\n|_preHandler[0]\n|_preHandler[1]\n|\nhandler\n|\npostHandler\n|_postHandler[0]\n|_postHandler[1]\n|\npreRun\n|_preRun[0]\n|_preRun[1]\n|\nrun\n|\npostRun\n|_postRun[0]\n|_postRun[1]\n")),(0,a.kt)("p",null,"All of the ",(0,a.kt)("inlineCode",{parentName:"p"},"pre")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"post")," parts of the lifecycles are arrays, whereas everything else is a single function"),(0,a.kt)("p",null,"When you run ",(0,a.kt)("inlineCode",{parentName:"p"},"import EzBackend from '@ezbackend/core"),", there are no functions in the lifecycle"),(0,a.kt)("p",null,"Then when you add ",(0,a.kt)("inlineCode",{parentName:"p"},"@ezbackend/common")," as a plugin, the below happens:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},".\n|\ninit[\ud83c\udfa3Create sequelize and fastify instance]\n|\n.\n|\nhandler[\ud83c\udfa3Import models from index.ts and register routes]\n|\n.\n|\nrun[\ud83c\udfa3Sync DB tables and start server]\n|\n.\n")),(0,a.kt)("p",null,"As you can see we have \ud83c\udfa3hooked\ud83c\udfa3 onto the lifecycle the commands to automatically start a server based on just a provided schema!"),(0,a.kt)("p",null,"Let's look at an actual example from how ",(0,a.kt)("inlineCode",{parentName:"p"},"init")," in ",(0,a.kt)("inlineCode",{parentName:"p"},"@ezbackend/common")," is implemented"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'const ezb = EzBackend.app() as EzBackend;\n\n\n//Configure defaults\nezb.plugins.init = (ezb, opts, cb) => {\n  ezb.sequelize = new Sequelize("sqlite::memory", opts.orm);\n  ezb.server = fastify(opts.server);\n  cb();\n};\n')),(0,a.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"Editing the ",(0,a.kt)("inlineCode",{parentName:"p"},"init"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"handler")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"run")," functions directly may cause future problems, because these functions will probably be edited by our one click deploy in the future"))),(0,a.kt)("p",null,"This system uses ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/fastify/avvio"},"avvio by fastify")," to declare every function at each step as a plugin, so that regardless of whether plugins are asynchronous or not they will still load in the same order"),(0,a.kt)("p",null,"Hence, for making a real plugin we should instead be creating pre and post hooks."),(0,a.kt)("p",null,"Let's look at an actual example from ",(0,a.kt)("inlineCode",{parentName:"p"},"@ezbackend/openapi"),", the plugin for generating documentation"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},".\n|\ninit[Create sequelize and fastify instance]\n|\npostInit\n|_[\ud83c\udfa3register swagger]\n|\nhandler[Import models from index.ts and register routes]\n|\n.\n|\nrun[Sync DB tables and start server]\n|\npostRun\n|_[\ud83c\udfa3run swagger and open documentation]\n")),(0,a.kt)("p",null,"So, instead of replacing the function entirely, we append the function, which means that each plugin can add an additional hook without removing hooks from previous plugins"),(0,a.kt)("p",null,"The actual implementation for running open api is something like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"ezb.plugins.postRun.push(()=> {\n  ezb.server.swagger();\n  if (ezb.options.server.port) open(`http://localhost:${ezb.options.server.port}/docs`);\n})\n")))}d.isMDXComponent=!0}}]);